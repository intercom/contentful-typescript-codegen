{"version":3,"file":"contentful-typescript-codegen.js","sources":["../src/renderers/contentful/renderContentfulImports.ts","../src/renderers/typescript/renderInterface.ts","../src/renderers/typescript/renderInterfaceProperty.ts","../src/renderers/contentful/renderField.ts","../src/renderers/contentful/renderContentTypeId.ts","../src/renderers/typescript/renderUnion.ts","../src/renderers/contentful/fields/renderSymbol.ts","../src/renderers/contentful/fields/renderLink.ts","../src/renderers/typescript/renderArrayOf.ts","../src/renderers/contentful/fields/renderArray.ts","../src/renderers/contentful/fields/renderBoolean.ts","../src/renderers/contentful/fields/renderLocation.ts","../src/renderers/contentful/fields/renderNumber.ts","../src/renderers/contentful/fields/renderObject.ts","../src/renderers/contentful/fields/renderRichText.ts","../src/renderers/contentful/renderContentType.ts","../src/renderers/contentful/renderAllLocales.ts","../src/renderers/contentful/renderDefaultLocale.ts","../src/renderers/contentful/renderNamespace.ts","../src/renderers/contentful/renderLocalizedTypes.ts","../src/renderers/render.ts","../src/renderers/contentful-fields-only/fields/renderLink.ts","../src/renderers/contentful-fields-only/fields/renderArray.ts","../src/renderers/contentful-fields-only/fields/renderRichText.ts","../src/renderers/contentful-fields-only/renderContentType.ts","../src/renderers/renderFieldsOnly.ts","../src/contentful-typescript-codegen.ts"],"sourcesContent":["export default function renderContentfulImports(localization: boolean = false): string {\n  if (localization) {\n    return `\n    // THIS FILE IS AUTOMATICALLY GENERATED. DO NOT MODIFY IT.\n\n    import { Entry } from 'contentful'\n    import { Document } from '@contentful/rich-text-types'\n  `\n  }\n\n  return `\n    // THIS FILE IS AUTOMATICALLY GENERATED. DO NOT MODIFY IT.\n\n    import { Asset, Entry } from 'contentful'\n    import { Document } from '@contentful/rich-text-types'\n  `\n}\n","export default function renderInterface({\n  name,\n  extension,\n  fields,\n  description,\n}: {\n  name: string\n  extension?: string\n  fields: string\n  description?: string\n}) {\n  return `\n    ${description ? `/** ${description} */` : \"\"}\n    export interface ${name} ${extension ? `extends ${extension}` : \"\"} {\n      ${fields}\n    }\n  `\n}\n","export default function renderInterfaceProperty(\n  name: string,\n  type: string,\n  required: boolean,\n  localization: boolean,\n  description?: string,\n): string {\n  return [\n    descriptionComment(description),\n    name,\n    required ? \"\" : \"?\",\n    \": \",\n    localization ? `LocalizedField<${type}>` : type,\n    required ? \"\" : \" | undefined\",\n    \";\",\n  ].join(\"\")\n}\n\nfunction descriptionComment(description: string | undefined) {\n  if (description) {\n    return `/** ${description} */\\n`\n  } else {\n    return \"\"\n  }\n}\n","import { Field } from \"contentful\"\nimport renderInterfaceProperty from \"../typescript/renderInterfaceProperty\"\n\nexport default function renderField(\n  field: Field,\n  type: string,\n  localization: boolean = false,\n): string {\n  return renderInterfaceProperty(field.id, type, field.required, localization, field.name)\n}\n","import { upperFirst, camelCase } from \"lodash\"\n\nexport default function renderContentTypeId(contentTypeId: string): string {\n  return upperFirst(camelCase(contentTypeId))\n}\n","export default function renderUnion(name: string, values: string[]): string {\n  return `\n    export type ${name} = ${renderUnionValues(values)};\n  `\n}\n\nexport function renderUnionValues(values: string[]): string {\n  if (values.length === 0) {\n    return \"never\"\n  } else {\n    return values.join(\" | \")\n  }\n}\n","import { Field } from \"contentful\"\n\nimport { renderUnionValues } from \"../../typescript/renderUnion\"\n\nexport default function renderSymbol(field: Field) {\n  const inValidation = field.validations.find(validation => !!validation.in)\n\n  if (inValidation) {\n    return renderUnionValues(inValidation.in!.map(value => `'${value}'`))\n  } else {\n    return \"string\"\n  }\n}\n","import { Field } from \"contentful\"\nimport renderContentTypeId from \"../renderContentTypeId\"\nimport { renderUnionValues } from \"../../typescript/renderUnion\"\n\nexport default function renderLink(field: Field): string {\n  if (field.linkType === \"Asset\") {\n    return \"Asset\"\n  }\n\n  if (field.linkType === \"Entry\") {\n    const contentTypeValidation = field.validations.find(validation => !!validation.linkContentType)\n\n    if (contentTypeValidation) {\n      return renderUnionValues(contentTypeValidation.linkContentType!.map(renderContentTypeId))\n    } else {\n      return \"Entry<{ [fieldId: string]: unknown }>\"\n    }\n  }\n\n  return \"unknown\"\n}\n","export default function renderArrayOf(source: string) {\n  return `(${source})[]`\n}\n","import { Field } from \"contentful\"\nimport renderSymbol from \"./renderSymbol\"\nimport renderLink from \"./renderLink\"\nimport renderArrayOf from \"../../typescript/renderArrayOf\"\n\nexport default function renderArray(field: Field): string {\n  if (!field.items) {\n    throw new Error(`Cannot render non-array field ${field.id} as an array`)\n  }\n\n  const fieldWithValidations: Field = {\n    ...field,\n    linkType: field.items.linkType,\n    validations: field.items.validations || [],\n  }\n\n  switch (field.items.type) {\n    case \"Symbol\": {\n      return renderArrayOf(renderSymbol(fieldWithValidations))\n    }\n\n    case \"Link\": {\n      return renderArrayOf(renderLink(fieldWithValidations))\n    }\n  }\n\n  return renderArrayOf(\"unknown\")\n}\n","import { Field } from \"contentful\"\n\nexport default function renderBoolean(field: Field) {\n  return \"boolean\"\n}\n","import { Field } from \"contentful\"\n\nexport default function renderLocation(field: Field): string {\n  return \"{ lat: number, lon: number }\"\n}\n","import { Field } from \"contentful\"\n\nexport default function renderNumber(field: Field): string {\n  return \"number\"\n}\n","import { Field } from \"contentful\"\n\nexport default function renderObject(field: Field): string {\n  return \"Record<string, any>\"\n}\n","import { Field } from \"contentful\"\n\nexport default function renderRichText(field: Field): string {\n  return \"Document\"\n}\n","import { ContentType, Field, FieldType, Sys } from \"contentful\"\n\nimport renderInterface from \"../typescript/renderInterface\"\nimport renderField from \"./renderField\"\nimport renderContentTypeId from \"./renderContentTypeId\"\n\nimport renderArray from \"./fields/renderArray\"\nimport renderBoolean from \"./fields/renderBoolean\"\nimport renderLink from \"./fields/renderLink\"\nimport renderLocation from \"./fields/renderLocation\"\nimport renderNumber from \"./fields/renderNumber\"\nimport renderObject from \"./fields/renderObject\"\nimport renderRichText from \"./fields/renderRichText\"\nimport renderSymbol from \"./fields/renderSymbol\"\n\nexport default function renderContentType(contentType: ContentType, localization: boolean): string {\n  const name = renderContentTypeId(contentType.sys.id)\n  const fields = renderContentTypeFields(contentType.fields, localization)\n  const sys = renderSys(contentType.sys)\n\n  return `\n    ${renderInterface({ name: `${name}Fields`, fields })}\n\n    ${descriptionComment(contentType.description)}\n    ${renderInterface({ name, extension: `Entry<${name}Fields>`, fields: sys })}\n  `\n}\n\nfunction descriptionComment(description: string | undefined) {\n  if (description) {\n    return `/** ${description} */`\n  }\n\n  return \"\"\n}\n\nfunction renderContentTypeFields(fields: Field[], localization: boolean): string {\n  return fields\n    .filter(field => !field.omitted)\n    .map<string>(field => {\n      const functionMap: Record<FieldType, (field: Field) => string> = {\n        Array: renderArray,\n        Boolean: renderBoolean,\n        Date: renderSymbol,\n        Integer: renderNumber,\n        Link: renderLink,\n        Location: renderLocation,\n        Number: renderNumber,\n        Object: renderObject,\n        RichText: renderRichText,\n        Symbol: renderSymbol,\n        Text: renderSymbol,\n      }\n\n      return renderField(field, functionMap[field.type](field), localization)\n    })\n    .join(\"\\n\\n\")\n}\n\nfunction renderSys(sys: Sys) {\n  return `\n    sys: {\n      id: string;\n      type: string;\n      createdAt: string;\n      updatedAt: string;\n      locale: string;\n      contentType: {\n        sys: {\n          id: '${sys.id}';\n          linkType: 'ContentType';\n          type: 'Link';\n        }\n      }\n    }\n  `\n}\n","import renderUnion from \"../typescript/renderUnion\"\nimport { Locale } from \"contentful\"\n\nexport default function renderAllLocales(locales: Locale[]): string {\n  return renderUnion(\"LOCALE_CODE\", locales.map(locale => `'${locale.code}'`))\n}\n","import { Locale } from \"contentful\"\n\nexport default function renderDefaultLocale(locales: Locale[]): string {\n  const defaultLocale = locales.find(locale => locale.default)\n\n  if (!defaultLocale) {\n    throw new Error(\"Could not find a default locale in Contentful.\")\n  }\n\n  return `export type CONTENTFUL_DEFAULT_LOCALE_CODE = '${defaultLocale.code}';`\n}\n","export default function renderNamespace(source: string, namespace: string | undefined) {\n  if (!namespace) return source\n\n  return `\n    declare namespace ${namespace} {\n    ${source}\n    }\n\n    export as namespace ${namespace}\n    export=${namespace}\n  `\n}\n","/** renders helper types for --localization flag */\nexport default function renderLocalizedTypes(localization: boolean) {\n  if (!localization) return null\n\n  return `\n    export type LocalizedField<T> = Partial<Record<LOCALE_CODE, T>>\n  \n    // We have to use our own localized version of Asset because of a bug in contentful https://github.com/contentful/contentful.js/issues/208\n    export interface Asset {\n      sys: Sys\n      fields: {\n        title: LocalizedField<string>\n        description: LocalizedField<string>\n        file: LocalizedField<{\n          url: string\n          details: {\n            size: number\n            image?: {\n              width: number\n              height: number\n            }\n          }\n          fileName: string\n          contentType: string\n        }>\n      }\n      toPlainObject(): object\n    }\n  `\n}\n","import { ContentType, Locale } from \"contentful\"\n\nimport { format, resolveConfig } from \"prettier\"\n\nimport renderContentfulImports from \"./contentful/renderContentfulImports\"\nimport renderContentType from \"./contentful/renderContentType\"\nimport renderUnion from \"./typescript/renderUnion\"\nimport renderAllLocales from \"./contentful/renderAllLocales\"\nimport renderDefaultLocale from \"./contentful/renderDefaultLocale\"\nimport renderNamespace from \"./contentful/renderNamespace\"\nimport renderLocalizedTypes from \"./contentful/renderLocalizedTypes\"\n\ninterface Options {\n  localization?: boolean\n  namespace?: string\n}\n\nexport default async function render(\n  contentTypes: ContentType[],\n  locales: Locale[],\n  { namespace, localization = false }: Options = {},\n) {\n  const sortedContentTypes = contentTypes.sort((a, b) => a.sys.id.localeCompare(b.sys.id))\n  const sortedLocales = locales.sort((a, b) => a.code.localeCompare(b.code))\n\n  const typingsSource = [\n    renderAllContentTypes(sortedContentTypes, localization),\n    renderAllContentTypeIds(sortedContentTypes),\n    renderAllLocales(sortedLocales),\n    renderDefaultLocale(sortedLocales),\n    renderLocalizedTypes(localization),\n  ].join(\"\\n\\n\")\n\n  const source = [\n    renderContentfulImports(localization),\n    renderNamespace(typingsSource, namespace),\n  ].join(\"\\n\\n\")\n\n  const prettierConfig = await resolveConfig(process.cwd())\n  return format(source, { ...prettierConfig, parser: \"typescript\" })\n}\n\nfunction renderAllContentTypes(contentTypes: ContentType[], localization: boolean): string {\n  return contentTypes.map(contentType => renderContentType(contentType, localization)).join(\"\\n\\n\")\n}\n\nfunction renderAllContentTypeIds(contentTypes: ContentType[]): string {\n  return renderUnion(\"CONTENT_TYPE\", contentTypes.map(contentType => `'${contentType.sys.id}'`))\n}\n","import { Field } from \"contentful\"\nimport renderContentTypeId from \"../../contentful/renderContentTypeId\"\nimport { renderUnionValues } from \"../../typescript/renderUnion\"\n\nexport default function renderLink(field: Field): string {\n  if (field.linkType === \"Asset\") {\n    return \"any\"\n  }\n\n  if (field.linkType === \"Entry\") {\n    const contentTypeValidation = field.validations.find(validation => !!validation.linkContentType)\n\n    if (contentTypeValidation) {\n      return renderUnionValues(contentTypeValidation.linkContentType!.map(renderContentTypeId))\n    } else {\n      return \"unknown\"\n    }\n  }\n\n  return \"unknown\"\n}\n","import { Field } from \"contentful\"\nimport renderSymbol from \"../../contentful/fields/renderSymbol\"\nimport renderLink from \"../../contentful-fields-only/fields/renderLink\"\nimport renderArrayOf from \"../../typescript/renderArrayOf\"\n\nexport default function renderArray(field: Field): string {\n  if (!field.items) {\n    throw new Error(`Cannot render non-array field ${field.id} as an array`)\n  }\n\n  const fieldWithValidations: Field = {\n    ...field,\n    linkType: field.items.linkType,\n    validations: field.items.validations || [],\n  }\n\n  switch (field.items.type) {\n    case \"Symbol\": {\n      return renderArrayOf(renderSymbol(fieldWithValidations))\n    }\n\n    case \"Link\": {\n      return renderArrayOf(renderLink(fieldWithValidations))\n    }\n  }\n\n  return renderArrayOf(\"unknown\")\n}\n","import { Field } from \"contentful\"\n\nexport default function renderRichText(field: Field): string {\n  return \"any\"\n}\n","import { ContentType, Field, FieldType } from \"contentful\"\n\nimport renderInterface from \"../typescript/renderInterface\"\nimport renderField from \"../contentful/renderField\"\nimport renderContentTypeId from \"../contentful/renderContentTypeId\"\n\nimport renderArray from \"../contentful-fields-only/fields/renderArray\"\nimport renderLink from \"../contentful-fields-only/fields/renderLink\"\nimport renderRichText from \"../contentful-fields-only/fields/renderRichText\"\n\nimport renderBoolean from \"../contentful/fields/renderBoolean\"\nimport renderLocation from \"../contentful/fields/renderLocation\"\nimport renderNumber from \"../contentful/fields/renderNumber\"\nimport renderObject from \"../contentful/fields/renderObject\"\nimport renderSymbol from \"../contentful/fields/renderSymbol\"\n\nexport default function renderContentType(contentType: ContentType): string {\n  const name = renderContentTypeId(contentType.sys.id)\n  const fields = renderContentTypeFields(contentType.fields)\n\n  return renderInterface({\n    name,\n    fields: `\n      fields: { ${fields} };\n      [otherKeys: string]: any;\n    `,\n  })\n}\n\nfunction renderContentTypeFields(fields: Field[]): string {\n  return fields\n    .filter(field => !field.omitted)\n    .map<string>(field => {\n      const functionMap: Record<FieldType, (field: Field) => string> = {\n        Array: renderArray,\n        Boolean: renderBoolean,\n        Date: renderSymbol,\n        Integer: renderNumber,\n        Link: renderLink,\n        Location: renderLocation,\n        Number: renderNumber,\n        Object: renderObject,\n        RichText: renderRichText,\n        Symbol: renderSymbol,\n        Text: renderSymbol,\n      }\n\n      return renderField(field, functionMap[field.type](field))\n    })\n    .join(\"\\n\\n\")\n}\n","import { ContentType } from \"contentful\"\n\nimport { format, resolveConfig } from \"prettier\"\n\nimport renderContentType from \"./contentful-fields-only/renderContentType\"\nimport renderNamespace from \"./contentful/renderNamespace\"\n\ninterface Options {\n  namespace?: string\n}\n\nexport default async function renderFieldsOnly(\n  contentTypes: ContentType[],\n  { namespace }: Options = {},\n) {\n  const sortedContentTypes = contentTypes.sort((a, b) => a.sys.id.localeCompare(b.sys.id))\n\n  const typingsSource = renderAllContentTypes(sortedContentTypes)\n  const source = [renderNamespace(typingsSource, namespace)].join(\"\\n\\n\")\n\n  const prettierConfig = await resolveConfig(process.cwd())\n\n  return format(source, { ...prettierConfig, parser: \"typescript\" })\n}\n\nfunction renderAllContentTypes(contentTypes: ContentType[]): string {\n  return contentTypes.map(contentType => renderContentType(contentType)).join(\"\\n\\n\")\n}\n","import render from \"./renderers/render\"\nimport renderFieldsOnly from \"./renderers/renderFieldsOnly\"\nimport path from \"path\"\nimport { outputFileSync } from \"fs-extra\"\n\nconst meow = require(\"meow\")\n\nconst cli = meow(\n  `\n  Usage\n    $ contentful-typescript-codegen --output <file> <options>\n\n  Options\n    --output,      -o  Where to write to\n    --poll,        -p  Continuously refresh types\n    --interval N,  -i  The interval in seconds at which to poll (defaults to 15)\n    --namespace N, -n  Wrap types in namespace N (disabled by default)\n    --fields-only      Output a tree that _only_ ensures fields are valid\n                       and present, and does not provide types for Sys,\n                       Assets, or Rich Text. This is useful for ensuring raw\n                       Contentful responses will be compatible with your code.\n    --localization -l  Output fields with localized values\n\n  Examples\n    $ contentful-typescript-codegen -o src/@types/generated/contentful.d.ts\n`,\n  {\n    flags: {\n      output: {\n        type: \"string\",\n        alias: \"o\",\n        isRequired: true,\n      },\n      fieldsOnly: {\n        type: \"boolean\",\n        isRequired: false,\n      },\n      poll: {\n        type: \"boolean\",\n        alias: \"p\",\n        isRequired: false,\n      },\n      interval: {\n        type: \"string\",\n        alias: \"i\",\n        isRequired: false,\n      },\n      namespace: {\n        type: \"string\",\n        alias: \"n\",\n        isRequired: false,\n      },\n      localization: {\n        type: \"boolean\",\n        alias: \"l\",\n        isRequired: false,\n      },\n    },\n  },\n)\n\nasync function runCodegen(outputFile: string) {\n  const getEnvironmentPath = path.resolve(process.cwd(), \"./getContentfulEnvironment.js\")\n  const getEnvironment = require(getEnvironmentPath)\n  const environment = await getEnvironment()\n  const contentTypes = await environment.getContentTypes({ limit: 1000 })\n  const locales = await environment.getLocales()\n  const outputPath = path.resolve(process.cwd(), outputFile)\n\n  let output\n  if (cli.flags.fieldsOnly) {\n    output = await renderFieldsOnly(contentTypes.items, { namespace: cli.flags.namespace })\n  } else {\n    output = await render(contentTypes.items, locales.items, {\n      localization: cli.flags.localization,\n      namespace: cli.flags.namespace,\n    })\n  }\n\n  outputFileSync(outputPath, output)\n}\n\nrunCodegen(cli.flags.output).catch(error => {\n  console.error(error)\n  process.exit(1)\n})\n\nif (cli.flags.poll) {\n  const intervalInSeconds = parseInt(cli.flags.interval, 10)\n\n  if (!isNaN(intervalInSeconds) && intervalInSeconds > 0) {\n    setInterval(() => runCodegen(cli.flags.output), intervalInSeconds * 1000)\n  } else {\n    throw new Error(`Expected a positive numeric interval, but got ${cli.flags.interval}`)\n  }\n}\n"],"names":["upperFirst","camelCase","descriptionComment","resolveConfig","format","renderLink","renderArray","renderRichText","renderContentType","renderContentTypeFields","renderAllContentTypes","outputFileSync"],"mappings":"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"}