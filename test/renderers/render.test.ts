import render from "../../src/renderers/render"
import { ContentType, Sys, Locale } from "contentful"

const test = ({ prefix = "I", suffix = "" }: { prefix?: string; suffix?: string } = {}) => () => {
  const contentTypes: ContentType[] = [
    {
      sys: {
        id: "myContentType",
      } as Sys,
      fields: [
        {
          id: "arrayField",
          name: "Array field",
          required: true,
          validations: [{}],
          items: {
            type: "Symbol",
            validations: [
              {
                in: ["one's", "of", "the", "above"],
              },
            ],
          },
          disabled: false,
          omitted: false,
          localized: false,
          type: "Array",
        },
      ],
      description: "",
      displayField: "",
      name: "",
      toPlainObject: () => ({} as ContentType),
    },
  ]

  const locales: Locale[] = [
    {
      name: "English (US)",
      fallbackCode: null,
      code: "en-US",
      default: true,
      sys: {} as Locale["sys"],
    },
    {
      name: "Brazilian Portuguese",
      fallbackCode: "en-US",
      code: "pt-BR",
      default: false,
      sys: {} as Locale["sys"],
    },
  ]

  it("renders a given content type", async () => {
    expect(await render(contentTypes, locales, { prefix, suffix })).toMatchInlineSnapshot(`
      "// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT MODIFY IT.

      import { Asset, Entry } from \\"contentful\\"

      export interface ${prefix}MyContentType${suffix}Fields {
        /** Array field */
        arrayField: (\\"one's\\" | \\"of\\" | \\"the\\" | \\"above\\")[]
      }

      export interface ${prefix}MyContentType${suffix} extends Entry<${prefix}MyContentType${suffix}Fields> {
        sys: {
          id: string
          type: string
          createdAt: string
          updatedAt: string
          locale: string
          contentType: {
            sys: {
              id: \\"myContentType\\"
              linkType: \\"ContentType\\"
              type: \\"Link\\"
            }
          }
        }
      }

      export type CONTENT_TYPE = \\"myContentType\\"

      export type IEntry = IMyContentType

      export type LOCALE_CODE = \\"en-US\\" | \\"pt-BR\\"

      export type CONTENTFUL_DEFAULT_LOCALE_CODE = \\"en-US\\"
      "
    `)
  })

  it("renders a given content type (with RichText)", async () => {
    const contentTypes: ContentType[] = [
      {
        sys: {
          id: "myContentType",
        } as Sys,
        fields: [
          {
            id: "richTextField",
            name: "richText field",
            required: true,
            validations: [{}],
            items: {
              type: "Symbol",
              validations: [],
            },
            disabled: false,
            omitted: false,
            localized: false,
            type: "RichText",
          },
        ],
        description: "",
        displayField: "",
        name: "",
        toPlainObject: () => ({} as ContentType),
      },
    ]
    expect(await render(contentTypes, locales)).toMatchInlineSnapshot(`
      "// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT MODIFY IT.

      import { Asset, Entry } from \\"contentful\\"
      import { Document } from \\"@contentful/rich-text-types\\"

      export interface IMyContentTypeFields {
        /** richText field */
        richTextField: Document
      }

      export interface IMyContentType extends Entry<IMyContentTypeFields> {
        sys: {
          id: string
          type: string
          createdAt: string
          updatedAt: string
          locale: string
          contentType: {
            sys: {
              id: \\"myContentType\\"
              linkType: \\"ContentType\\"
              type: \\"Link\\"
            }
          }
        }
      }

      export type CONTENT_TYPE = \\"myContentType\\"

      export type IEntry = IMyContentType

      export type LOCALE_CODE = \\"en-US\\" | \\"pt-BR\\"

      export type CONTENTFUL_DEFAULT_LOCALE_CODE = \\"en-US\\"
      "
    `)
  })

  it("renders a given localized content type", async () => {
    const contentTypes: ContentType[] = [
      {
        sys: {
          id: "myContentType",
        } as Sys,
        fields: [
          {
            id: "arrayField",
            name: "Array field",
            required: true,
            validations: [{}],
            items: {
              type: "Symbol",
              validations: [
                {
                  in: ["one's", "of", "the", "above"],
                },
              ],
            },
            disabled: false,
            omitted: false,
            localized: false,
            type: "Array",
          },
        ],
        description: "",
        displayField: "",
        name: "",
        toPlainObject: () => ({} as ContentType),
      },
    ]

    expect(await render(contentTypes, locales, { prefix, suffix, localization: true }))
      .toMatchInlineSnapshot(`
      "// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT MODIFY IT.

      import { Entry } from \\"contentful\\"

      export interface ${prefix}MyContentType${suffix}Fields {
        /** Array field */
        arrayField: LocalizedField<(\\"one's\\" | \\"of\\" | \\"the\\" | \\"above\\")[]>
      }

      export interface ${prefix}MyContentType${suffix} extends Entry<${prefix}MyContentType${suffix}Fields> {
        sys: {
          id: string
          type: string
          createdAt: string
          updatedAt: string
          locale: string
          contentType: {
            sys: {
              id: \\"myContentType\\"
              linkType: \\"ContentType\\"
              type: \\"Link\\"
            }
          }
        }
      }

      export type CONTENT_TYPE = \\"myContentType\\"

      export type IEntry = IMyContentType

      export type LOCALE_CODE = \\"en-US\\" | \\"pt-BR\\"

      export type CONTENTFUL_DEFAULT_LOCALE_CODE = \\"en-US\\"

      export type LocalizedField<T> = Partial<Record<LOCALE_CODE, T>>

      // We have to use our own localized version of Asset because of a bug in contentful https://github.com/contentful/contentful.js/issues/208
      export interface Asset {
        sys: Sys
        fields: {
          title: LocalizedField<string>
          description: LocalizedField<string>
          file: LocalizedField<{
            url: string
            details: {
              size: number
              image?: {
                width: number
                height: number
              }
            }
            fileName: string
            contentType: string
          }>
        }
        toPlainObject(): object
      }
      "
    `)
  })

  it("renders given a content type inside a namespace", async () => {
    expect(await render(contentTypes, locales, { prefix, suffix, namespace: "Codegen" }))
      .toMatchInlineSnapshot(`
      "// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT MODIFY IT.

      import { Asset, Entry } from \\"contentful\\"

      declare namespace Codegen {
        export interface ${prefix}MyContentType${suffix}Fields {
          /** Array field */
          arrayField: (\\"one's\\" | \\"of\\" | \\"the\\" | \\"above\\")[]
        }

        export interface ${prefix}MyContentType${suffix} extends Entry<${prefix}MyContentType${suffix}Fields> {
          sys: {
            id: string
            type: string
            createdAt: string
            updatedAt: string
            locale: string
            contentType: {
              sys: {
                id: \\"myContentType\\"
                linkType: \\"ContentType\\"
                type: \\"Link\\"
              }
            }
          }
        }

        export type CONTENT_TYPE = \\"myContentType\\"

        export type IEntry = IMyContentType

        export type LOCALE_CODE = \\"en-US\\" | \\"pt-BR\\"

        export type CONTENTFUL_DEFAULT_LOCALE_CODE = \\"en-US\\"
      }

      export as namespace Codegen
      export = Codegen
      "
    `)
  })
}

describe("render() with default 'I' prefix and no suffix", test())
describe("render() with no prefix and 'Data' suffix", test({ prefix: "", suffix: "Data" }))
describe("render() with 'C' prefix and 'Data' suffix", test({ prefix: "C", suffix: "Data" }))
